{
    "id": "315eef850227c40ef65a1059cd93bbde",
    "name": "Dropbox Content API v1",
    "description": null,
    "auth": null,
    "events": null,
    "variables": [],
    "order": [],
    "folders_order": [],
    "folders": [],
    "requests": [
        {
            "id": "e6839aba931689e670f2ca4e8912aba3",
            "name": "Downloads a file.",
            "url": "httpsapi-content.dropbox.com\/1\/files\/{root}\/{path}",
            "description": "Downloads a file.\n\nThis method also supports [HTTP Range Retrieval Requests](http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.35.2)\nto allow retrieving partial file contents.\n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "root",
                    "description": "Root folder: `auto` - automatically determines the appropriate root folder using your app's permission\nlevel (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "path",
                    "description": "The path to the file you want to retrieve.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "rev",
                    "description": "The revision of the file to retrieve. This defaults to the most recent revision.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        },
        {
            "id": "13e3cd705d9457b8ef9b103708c5fa0f",
            "name": "Uploads a file using PUT semantics.",
            "url": "httpsapi-content.dropbox.com\/1\/files_put\/{root}\/{path}",
            "description": "Uploads a file using PUT semantics.\n\nThe preferred HTTP method for this call is **PUT**. For compatibility with browser environments, the **POST**\nHTTP method is also recognized.\n\n**Note:** Providing a `Content-Length` header set to the size of the uploaded file is required so that the\nserver can verify that it has received the entire file contents.\n\n**Note:** `\/files_put` has a maximum file size limit of 150 MB and does not support uploads with chunked\nencoding. To upload larger files, use [\/ch",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "root",
                    "description": "Root folder: `auto` - automatically determines the appropriate root folder using your app's permission\nlevel (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "path",
                    "description": "The path to the file you want to retrieve.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "locale",
                    "description": "The metadata returned on successful upload will have its `size` field translated based on the given locale.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "overwrite",
                    "description": "This value, either `true` (default) or `false`, determines whether an existing file will be overwritten\nby this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters\ndetermine whether a conflict occurs and how that conflict is resolved.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "parent_rev",
                    "description": "If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the\nlatest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will\noccur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).\nYou can get the most recent rev by performing a call to [\/metadata](https:\/\/www.dropbox.com\/developers\/core\/docs#metadata).\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "autorename",
                    "description": "This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,\nthe file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might\nbe automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.\nIf `false`, the call will fail with a 409 (Conflict) response code.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "file_content",
                    "description": "The file contents to be uploaded. Since the entire `PUT` body will be treated as the file, any parameters\nmust be passed as part of the request URL. The request URL should be signed just as you would sign any\nother OAuth request URL.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        },
        {
            "id": "c8929b33a86daf27a26abb95f48c2cec",
            "name": "Uploads a file using PUT semantics.",
            "url": "httpsapi-content.dropbox.com\/1\/files_put\/{root}\/{path}",
            "description": "Uploads a file using PUT semantics.\n\nThe preferred HTTP method for this call is **PUT**. For compatibility with browser environments, the **POST**\nHTTP method is also recognized.\n\n**Note:** Providing a `Content-Length` header set to the size of the uploaded file is required so that the\nserver can verify that it has received the entire file contents.\n\n**Note:** `\/files_put` has a maximum file size limit of 150 MB and does not support uploads with chunked\nencoding. To upload larger files, use [\/ch",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "root",
                    "description": "Root folder: `auto` - automatically determines the appropriate root folder using your app's permission\nlevel (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "path",
                    "description": "The path to the file you want to retrieve.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "locale",
                    "description": "The metadata returned on successful upload will have its `size` field translated based on the given locale.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "overwrite",
                    "description": "This value, either `true` (default) or `false`, determines whether an existing file will be overwritten\nby this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters\ndetermine whether a conflict occurs and how that conflict is resolved.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "parent_rev",
                    "description": "If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the\nlatest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will\noccur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).\nYou can get the most recent rev by performing a call to [\/metadata](https:\/\/www.dropbox.com\/developers\/core\/docs#metadata).\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "autorename",
                    "description": "This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,\nthe file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might\nbe automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.\nIf `false`, the call will fail with a 409 (Conflict) response code.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "file_content",
                    "description": "The file contents to be uploaded. Since the entire `PUT` body will be treated as the file, any parameters\nmust be passed as part of the request URL. The request URL should be signed just as you would sign any\nother OAuth request URL.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        },
        {
            "id": "9089ec5a508fa14fa060326cd9368026",
            "name": "Gets a thumbnail for an image.",
            "url": "httpsapi-content.dropbox.com\/1\/thumbnails\/{root}\/{path}",
            "description": "Gets a thumbnail for an image.\n\nThis method currently supports files with the following file extensions: .jpg, .jpeg, .png, .tiff, .tif, .gif, .bmp\n\nPhotos that are larger than 20MB in size won't be converted to a thumbnail.\n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "root",
                    "description": "Root folder: `auto` - automatically determines the appropriate root folder using your app's permission\nlevel (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "path",
                    "description": "The path to the file you want to retrieve.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "format",
                    "description": "For images that are photos, `jpeg` (default) should be preferred, while `png` is better for screenshots and digital art.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "size",
                    "description": "Default size is `s`. Sizes in pixels are `xs` - 32x32, `s` - 64x64, `m` - 128x128, `l` - 640x480, `xl` - 1024x768",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        },
        {
            "id": "2f5ea4a233ab97d1e1ba67e3124a67dd",
            "name": "Gets a preview for a file.",
            "url": "httpsapi-content.dropbox.com\/1\/previews\/{root}\/{path}",
            "description": "Gets a preview for a file.\n\nPreviews are only generated for the files with the following extensions: .doc, .docx, .docm, .ppt, .pps,\n.ppsx, .ppsm, .pptx, .pptm, .xls, .xlsx, .xlsm, .rtf\n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "root",
                    "description": "Root folder: `auto` - automatically determines the appropriate root folder using your app's permission\nlevel (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "path",
                    "description": "The path to the file you want to retrieve.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "rev",
                    "description": "The revision of the file to retrieve. This defaults to the most recent revision.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        },
        {
            "id": "9f6dffb21a6eaaa6c5ad5c27540a4a88",
            "name": "Uploads large files to Dropbox in multiple chunks.",
            "url": "httpsapi-content.dropbox.com\/1\/chunked_upload",
            "description": "Uploads large files to Dropbox in multiple chunks. Also has the ability to resume if the upload is interrupted.\nThis allows for uploads larger than the `\/files_put` maximum of 150 MB.\n\nTypical usage:\n  1. Send a PUT request to `\/chunked_upload` with the first chunk of the file without setting `upload_id`, and\n  receive an `upload_id` in return.\n  2. Repeatedly `PUT` subsequent chunks using the `upload_id` to identify the upload in progress and an `offset`\n  representing the number of bytes trans",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "upload_id",
                    "description": "The unique ID of the in-progress upload on the server. If left blank, the server will create a new\nupload session.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "offset",
                    "description": "The byte offset of this chunk, relative to the beginning of the full file. The server will verify that\nthis matches the offset it expects. If it does not, the server will return an error with the expected\noffset.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "file_content",
                    "description": "The file contents to be uploaded. Since the entire `PUT` body will be treated as the file, any parameters\nmust be passed as part of the request URL. The request URL should be signed just as you would sign any\nother OAuth request URL.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        },
        {
            "id": "d06030d2c892dabe867f4a118c486b38",
            "name": "Completes an upload initiated by the chunked upload method.",
            "url": "httpsapi-content.dropbox.com\/1\/commit_chunked_upload\/{root}\/{path}",
            "description": "Completes an upload initiated by the `\/chunked_upload` method. Saves a file uploaded via `\/chunked_upload` to\na user's Dropbox.\n\n`\/commit_chunked_upload` is similar to `\/files_put`. The main difference is that while `\/files_put` takes the\nfile contents in the request body, `\/commit_chunked_upload` takes a parameter `upload_id`, which is obtained\nwhen the file contents are uploaded via `\/chunked_upload`.\n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "root",
                    "description": "Root folder: `auto` - automatically determines the appropriate root folder using your app's permission\nlevel (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "path",
                    "description": "The path to the file you want to retrieve.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "locale",
                    "description": "The metadata returned on successful upload will have its `size` field translated based on the given locale.",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "overwrite",
                    "description": "This value, either `true` (default) or `false`, determines whether an existing file will be overwritten\nby this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters\ndetermine whether a conflict occurs and how that conflict is resolved.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "parent_rev",
                    "description": "If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the\nlatest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will\noccur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).\nYou can get the most recent rev by performing a call to [\/metadata](https:\/\/www.dropbox.com\/developers\/core\/docs#metadata).\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "autorename",
                    "description": "This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,\nthe file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might\nbe automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.\nIf `false`, the call will fail with a 409 (Conflict) response code.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "upload_id",
                    "description": "The unique ID of the in-progress upload on the server. If left blank, the server will create a new\nupload session.\n",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "315eef850227c40ef65a1059cd93bbde",
            "rawModeData": ""
        }
    ]
}